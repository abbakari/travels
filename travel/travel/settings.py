"""
Django settings for travel project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()


# ----------------------------------------
# Build paths inside the project like this: BASE_DIR / 'subdir'.
# ----------------------------------------
BASE_DIR = Path(__file__).resolve().parent.parent


# ----------------------------------------
# Quick-start development settings - unsuitable for production
# ----------------------------------------

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
# Cast DEBUG to boolean (expects 'True' or 'False' in your .env)
DEBUG = os.environ.get('DEBUG', 'False') == 'True'

ALLOWED_HOSTS = [
    '.onrender.com',  # allow any subdomain of onrender.com
    'localhost',
    '127.0.0.1',
]


# ----------------------------------------
# Application definition
# ----------------------------------------
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Your apps
    'myapp',

    # Third-party apps
    'cloudinary',
    'cloudinary_storage',
    'crispy_forms',
]

# Tell Django to store uploaded media files on Cloudinary
DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'

# Cloudinary configuration (pulled from environment)
CLOUDINARY_STORAGE = {
    'CLOUD_NAME': os.environ.get('CLOUDINARY_CLOUD_NAME'),
    'API_KEY':    os.environ.get('CLOUDINARY_API_KEY'),
    'API_SECRET': os.environ.get('CLOUDINARY_API_SECRET'),
}


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',

    # Whitenoise should come immediately after SecurityMiddleware
    'whitenoise.middleware.WhiteNoiseMiddleware',

    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # Custom middleware (if needed)
    'myapp.middleware.SystemSettingExpirationMiddleware',
]

ROOT_URLCONF = 'travel.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # your project-level templates
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',  # needed by allauth, etc.
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'travel.wsgi.application'


# ----------------------------------------
# Database
# ----------------------------------------
# Using SQLite for now; on Render you can switch to Postgres via DATABASE_URL if desired.
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# ----------------------------------------
# Password validation
# ----------------------------------------
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# If you have a custom user model:
AUTH_USER_MODEL = 'myapp.User'


# ----------------------------------------
# Internationalization
# ----------------------------------------
LANGUAGE_CODE = 'en-us'

# You can set this to your local time zone; UK defaults to UTC but Tanzania is Africa/Dar_es_Salaam.
TIME_ZONE = 'Africa/Dar_es_Salaam'

USE_I18N = True
USE_TZ = True


# ----------------------------------------
# Static files (CSS, JavaScript, etc.)
# ----------------------------------------
# URL prefix for static files
STATIC_URL = '/static/'

# Where Django will look for additional static files (e.g., myapp/static)
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'myapp/static')]

# Where 'collectstatic' will collect files for production
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Use Whitenoise’s compressed manifest storage
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# ----------------------------------------
# (No local MEDIA_ROOT / MEDIA_URL because Cloudinary handles media storage)
# ----------------------------------------


# ----------------------------------------
# Crispy Forms (if you’re using it)
# ----------------------------------------
CRISPY_ALLOWED_TEMPLATE_PACKS = ["bootstrap4"]
CRISPY_TEMPLATE_PACK = 'bootstrap4'


# ----------------------------------------
# Authentication
# ----------------------------------------
LOGIN_REDIRECT_URL = 'dashboard'
LOGIN_URL = 'login'


# ----------------------------------------
# Default primary key field type
# ----------------------------------------
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# ----------------------------------------
# Email settings (pulled from environment for security)
# ----------------------------------------
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST        = os.environ.get('EMAIL_HOST', 'smtp.your-email-provider.com')
EMAIL_PORT        = int(os.environ.get('EMAIL_PORT', 587))
EMAIL_USE_TLS     = os.environ.get('EMAIL_USE_TLS', 'True') == 'True'
EMAIL_HOST_USER   = os.environ.get('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')
DEFAULT_FROM_EMAIL  = os.environ.get('DEFAULT_FROM_EMAIL', EMAIL_HOST_USER)
